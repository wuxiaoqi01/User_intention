/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "userintent_types.h"

#include <algorithm>

namespace intentionreg {

const char* UserIntent::ascii_fingerprint = "96172B182792B28FDB67331000F75331";
const uint8_t UserIntent::binary_fingerprint[16] = {0x96,0x17,0x2B,0x18,0x27,0x92,0xB2,0x8F,0xDB,0x67,0x33,0x10,0x00,0xF7,0x53,0x31};

uint32_t UserIntent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->robotid);
          this->__isset.robotid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->inforsent);
          this->__isset.inforsent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sceneid);
          this->__isset.sceneid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->inventv);
          this->__isset.inventv = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->feedback);
          this->__isset.feedback = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserIntent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UserIntent");

  xfer += oprot->writeFieldBegin("robotid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->robotid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inforsent", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->inforsent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sceneid", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->sceneid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inventv", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->inventv);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("feedback", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->feedback);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserIntent &a, UserIntent &b) {
  using ::std::swap;
  swap(a.robotid, b.robotid);
  swap(a.inforsent, b.inforsent);
  swap(a.sceneid, b.sceneid);
  swap(a.inventv, b.inventv);
  swap(a.feedback, b.feedback);
  swap(a.__isset, b.__isset);
}

} // namespace
