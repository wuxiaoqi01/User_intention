/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef userintent_TYPES_H
#define userintent_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace intentionreg {

typedef struct _UserIntent__isset {
  _UserIntent__isset() : robotid(false), inforsent(false), sceneid(false), inventv(false), feedback(false) {}
  bool robotid;
  bool inforsent;
  bool sceneid;
  bool inventv;
  bool feedback;
} _UserIntent__isset;

class UserIntent {
 public:

  static const char* ascii_fingerprint; // = "96172B182792B28FDB67331000F75331";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x17,0x2B,0x18,0x27,0x92,0xB2,0x8F,0xDB,0x67,0x33,0x10,0x00,0xF7,0x53,0x31};

  UserIntent() : robotid(), inforsent(), sceneid(), inventv(0), feedback() {
  }

  virtual ~UserIntent() throw() {}

  std::string robotid;
  std::string inforsent;
  std::string sceneid;
  int16_t inventv;
  std::string feedback;

  _UserIntent__isset __isset;

  void __set_robotid(const std::string& val) {
    robotid = val;
  }

  void __set_inforsent(const std::string& val) {
    inforsent = val;
  }

  void __set_sceneid(const std::string& val) {
    sceneid = val;
  }

  void __set_inventv(const int16_t val) {
    inventv = val;
  }

  void __set_feedback(const std::string& val) {
    feedback = val;
  }

  bool operator == (const UserIntent & rhs) const
  {
    if (!(robotid == rhs.robotid))
      return false;
    if (!(inforsent == rhs.inforsent))
      return false;
    if (!(sceneid == rhs.sceneid))
      return false;
    if (!(inventv == rhs.inventv))
      return false;
    if (!(feedback == rhs.feedback))
      return false;
    return true;
  }
  bool operator != (const UserIntent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserIntent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UserIntent &a, UserIntent &b);

} // namespace

#endif
