/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef UserIntentService_H
#define UserIntentService_H

#include <thrift/TDispatchProcessor.h>
#include "userintent_types.h"

namespace intentionreg {

class UserIntentServiceIf {
 public:
  virtual ~UserIntentServiceIf() {}
  virtual void getUserIntent(UserIntent& _return, const std::string& robotid, const std::string& inforsent) = 0;
};

class UserIntentServiceIfFactory {
 public:
  typedef UserIntentServiceIf Handler;

  virtual ~UserIntentServiceIfFactory() {}

  virtual UserIntentServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(UserIntentServiceIf* /* handler */) = 0;
};

class UserIntentServiceIfSingletonFactory : virtual public UserIntentServiceIfFactory {
 public:
  UserIntentServiceIfSingletonFactory(const boost::shared_ptr<UserIntentServiceIf>& iface) : iface_(iface) {}
  virtual ~UserIntentServiceIfSingletonFactory() {}

  virtual UserIntentServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(UserIntentServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<UserIntentServiceIf> iface_;
};

class UserIntentServiceNull : virtual public UserIntentServiceIf {
 public:
  virtual ~UserIntentServiceNull() {}
  void getUserIntent(UserIntent& /* _return */, const std::string& /* robotid */, const std::string& /* inforsent */) {
    return;
  }
};

typedef struct _UserIntentService_getUserIntent_args__isset {
  _UserIntentService_getUserIntent_args__isset() : robotid(false), inforsent(false) {}
  bool robotid;
  bool inforsent;
} _UserIntentService_getUserIntent_args__isset;

class UserIntentService_getUserIntent_args {
 public:

  UserIntentService_getUserIntent_args() : robotid(), inforsent() {
  }

  virtual ~UserIntentService_getUserIntent_args() throw() {}

  std::string robotid;
  std::string inforsent;

  _UserIntentService_getUserIntent_args__isset __isset;

  void __set_robotid(const std::string& val) {
    robotid = val;
  }

  void __set_inforsent(const std::string& val) {
    inforsent = val;
  }

  bool operator == (const UserIntentService_getUserIntent_args & rhs) const
  {
    if (!(robotid == rhs.robotid))
      return false;
    if (!(inforsent == rhs.inforsent))
      return false;
    return true;
  }
  bool operator != (const UserIntentService_getUserIntent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserIntentService_getUserIntent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserIntentService_getUserIntent_pargs {
 public:


  virtual ~UserIntentService_getUserIntent_pargs() throw() {}

  const std::string* robotid;
  const std::string* inforsent;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserIntentService_getUserIntent_result__isset {
  _UserIntentService_getUserIntent_result__isset() : success(false) {}
  bool success;
} _UserIntentService_getUserIntent_result__isset;

class UserIntentService_getUserIntent_result {
 public:

  UserIntentService_getUserIntent_result() {
  }

  virtual ~UserIntentService_getUserIntent_result() throw() {}

  UserIntent success;

  _UserIntentService_getUserIntent_result__isset __isset;

  void __set_success(const UserIntent& val) {
    success = val;
  }

  bool operator == (const UserIntentService_getUserIntent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UserIntentService_getUserIntent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserIntentService_getUserIntent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserIntentService_getUserIntent_presult__isset {
  _UserIntentService_getUserIntent_presult__isset() : success(false) {}
  bool success;
} _UserIntentService_getUserIntent_presult__isset;

class UserIntentService_getUserIntent_presult {
 public:


  virtual ~UserIntentService_getUserIntent_presult() throw() {}

  UserIntent* success;

  _UserIntentService_getUserIntent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class UserIntentServiceClient : virtual public UserIntentServiceIf {
 public:
  UserIntentServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  UserIntentServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getUserIntent(UserIntent& _return, const std::string& robotid, const std::string& inforsent);
  void send_getUserIntent(const std::string& robotid, const std::string& inforsent);
  void recv_getUserIntent(UserIntent& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UserIntentServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<UserIntentServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (UserIntentServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getUserIntent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UserIntentServiceProcessor(boost::shared_ptr<UserIntentServiceIf> iface) :
    iface_(iface) {
    processMap_["getUserIntent"] = &UserIntentServiceProcessor::process_getUserIntent;
  }

  virtual ~UserIntentServiceProcessor() {}
};

class UserIntentServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  UserIntentServiceProcessorFactory(const ::boost::shared_ptr< UserIntentServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< UserIntentServiceIfFactory > handlerFactory_;
};

class UserIntentServiceMultiface : virtual public UserIntentServiceIf {
 public:
  UserIntentServiceMultiface(std::vector<boost::shared_ptr<UserIntentServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UserIntentServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<UserIntentServiceIf> > ifaces_;
  UserIntentServiceMultiface() {}
  void add(boost::shared_ptr<UserIntentServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getUserIntent(UserIntent& _return, const std::string& robotid, const std::string& inforsent) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserIntent(_return, robotid, inforsent);
    }
    ifaces_[i]->getUserIntent(_return, robotid, inforsent);
    return;
  }

};

} // namespace

#endif
